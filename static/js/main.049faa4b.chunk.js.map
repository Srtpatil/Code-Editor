{"version":3,"sources":["component/editor/editor.js","component/button/button.js","component/dropdown/dropdown.js","component/toolbar/toolbar.js","component/loader/loader.js","component/navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Editor","cm","this","props","reset","getCodeMirror","setValue","helper","isFullScreen","setOption","fullscreenhelper","value","isReadOnly","isSelected","text","language","selectHelper","className","class","ref","c","options","mode","theme","lineNumbers","lineNumber","autoCloseTags","autofocus","extraKeys","F11","getOption","Esc","readOnly","onChange","changed","Component","Button","classes","onClick","clicked","children","Dropdown","option","Object","keys","map","key","val","selected","id","Toolbar","languages","Python","themes","dracula","material","runCode","fullScreen","downloadCode","Loader","Navbar","App","state","code","isReset","isRunning","inputText","outputText","language_id","editorUpdated","newCode","setState","inputUpdated","newInput","selectHandler","e","target","resetCode","prevState","fullScreenToggle","extention","fileName","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","decode","bytes","console","log","escaped","escape","atob","decodeURIComponent","unescape","postData","source_code","stdin","then","res","setTimeout","fetchSubmission","submission_token","a","getData","result","status","output","stdout","compile_output","stderr","url","fetch","response","json","data","method","headers","JSON","stringify","token","loading","title","autoFocus","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.049faa4b.chunk.js","sourcesContent":["import CodeMirror from \"react-codemirror\";\nimport React, { Component } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/clike/clike\";\nimport \"codemirror/theme/dracula.css\";\nimport \"codemirror/addon/edit/closetag\";\nimport \"./editor.css\";\nimport \"codemirror/theme/material-darker.css\";\nimport \"codemirror/addon/display/fullscreen.css\";\nimport \"codemirror/addon/display/fullscreen\";\n\nclass Editor extends Component {\n  cm = null;\n\n  render() {\n    if (this.props.reset) {\n      let editor = this.cm.getCodeMirror();\n      editor.setValue(\"\");\n      this.props.helper();\n    }\n\n    if (this.props.isFullScreen) {\n      let editor = this.cm.getCodeMirror();\n      editor.setOption(\"fullScreen\", true);\n      this.props.fullscreenhelper();\n    }\n\n    if (this.props.value !== \"\" && this.props.isReadOnly) {\n      let outputBox = this.cm.getCodeMirror();\n      outputBox.setValue(this.props.value);\n    }\n\n    // \"text/x-csrc\": \"48\",\n    // \"text/x-c++src\": \"54\",\n    // \"text/x-java\": \"62\",\n    // Python: \"71\"\n\n    if (this.props.isSelected) {\n      let text = \"\";\n      switch (this.props.language) {\n        case \"text/x-csrc\":\n          text = \"#include <stdio.h>\\nint main()\\n{\\n   return 0;\\n}\";\n          break;\n\n        case \"text/x-c++src\":\n          text =\n            \"#include <iostream>\\nusing namespace std;\\n\\nint main() \\n{\\n\\treturn 0;\\n}\";\n          break;\n\n        case \"text/x-java\":\n          text =\n            \"public class Main {\\n    public static void main(String[] args) {\\n        \\n    }\\n}\";\n          break;\n\n        case \"Python\":\n          text = \"#Your Python came here!\";\n          break;\n\n        default:\n          text = \"\";\n      }\n\n      let editor = this.cm.getCodeMirror();\n      editor.setValue(text);\n      this.props.selectHelper();\n    }\n\n    return (\n      <CodeMirror\n        className={this.props.class}\n        ref={c => (this.cm = c)}\n        value={this.props.value}\n        options={{\n          mode: this.props.language,\n          theme: this.props.theme,\n          lineNumbers: this.props.lineNumber,\n          autoCloseTags: true,\n          autofocus: this.props.autofocus,\n          extraKeys: {\n            F11: function(cm) {\n              cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n            },\n            Esc: function(cm) {\n              if (cm.getOption(\"fullScreen\")) cm.setOption(\"fullScreen\", false);\n            }\n          },\n          readOnly: this.props.isReadOnly\n        }}\n        onChange={this.props.changed}\n      />\n    );\n  }\n}\n\nexport default Editor;\n","import React, { Component } from \"react\";\nimport \"./button.css\";\n\nclass Button extends Component {\n  render() {\n    let classes = \"bttn \" + this.props.class;\n    return (\n      <button className={classes} onClick={this.props.clicked}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./dropdown.css\";\n\nclass Dropdown extends Component {\n  option = Object.keys(this.props.options).map(key => {\n    if (typeof this.props.options[key] === \"object\") {\n      return Object.keys(this.props.options[key]).map(val => (\n        <option value={key}>{this.props.options[key][val]}</option>\n      ));\n    } else {\n      return <option value={key}>{this.props.options[key]}</option>;\n    }\n  });\n\n  render() {\n    return (\n      <select\n        onChange={this.props.selected}\n        id={this.props.id}\n        className=\"select_box\"\n      >\n        {this.option}\n      </select>\n    );\n  }\n}\n\nexport default Dropdown;\n","import React, { Component } from \"react\";\nimport Button from \"../button/button\";\nimport Dropdown from \"../dropdown/dropdown\";\n\nimport \"./toolbar.css\";\n\nclass Toolbar extends Component {\n  languages = {\n    \"text/x-csrc\": \"C\",\n    \"text/x-c++src\": \"C++\",\n    \"text/x-java\": \"Java\",\n    Python: \"Python\"\n  };\n\n  themes = {\n    \"material-darker\": \"material-darker\",\n    dracula: \"dracula\",\n    material: \"material\"\n  };\n\n  render() {\n    return (\n      <div className=\"toolbar\">\n        <Dropdown\n          options={this.languages}\n          selected={this.props.selected}\n          id=\"language\"\n          class=\"ui dropdown\"\n        />\n        <Dropdown\n          options={this.themes}\n          selected={this.props.selected}\n          id=\"theme\"\n        />\n\n        <Button class=\"ui labeled icon button run\" clicked={this.props.runCode}>\n          <i class=\"play icon\"></i>\n          Run\n        </Button>\n\n        <Button class=\"fullscreen\" clicked={this.props.fullScreen}>\n          <span class=\"glyphicon glyphicon-fullscreen\"></span>\n        </Button>\n        <Button class=\"reset\" clicked={this.props.reset}>\n          <span class=\"glyphicon glyphicon-refresh\"></span>\n        </Button>\n        <Button class=\"downloadCode\" clicked={this.props.downloadCode}>\n          <span class=\"glyphicon glyphicon-download-alt\"></span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar;\n","import React from \"react\";\nimport \"./loader.css\";\nconst Loader = () => {\n  return (\n    <div class=\"lds-ellipsis\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div className=\"nav-bar\">\n        <h1>Code Editor</h1>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Editor from \"./component/editor/editor\";\nimport Toolbar from \"./component/toolbar/toolbar\";\nimport Loader from \"./component/loader/loader\";\nimport Navbar from \"./component/navbar/navbar\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    code: \"#include <stdio.h>\\nint main()\\n{\\n   return 0;\\n}\",\n    theme: \"material-darker\",\n    language: \"text/x-csrc\",\n    isFullScreen: false,\n    isReset: false,\n    isRunning: false,\n    inputText: \"\",\n    outputText: \"\",\n    isSelected: false,\n  };\n\n  language_id = {\n    \"text/x-csrc\": \"48\",\n    \"text/x-c++src\": \"54\",\n    \"text/x-java\": \"62\",\n    Python: \"71\",\n  };\n\n  editorUpdated = (newCode) => {\n    this.setState({\n      code: newCode,\n    });\n  };\n\n  inputUpdated = (newInput) => {\n    this.setState({\n      inputText: newInput,\n    });\n  };\n\n  selectHandler = (e) => {\n    if (e.target.id === \"theme\") {\n      this.setState({\n        theme: e.target.value,\n      });\n    } else if (e.target.id === \"language\") {\n      this.setState({\n        language: e.target.value,\n        isSelected: true,\n      });\n    }\n  };\n\n  selectHelper = () => {\n    this.setState({\n      isSelected: false,\n    });\n  };\n\n  resetCode = () => {\n    this.setState((prevState) => {\n      return { isReset: !prevState.isReset };\n    });\n  };\n\n  fullScreenToggle = () => {\n    this.setState((prevState) => {\n      return {\n        isFullScreen: true,\n      };\n    });\n  };\n\n  fullscreenhelper = () => {\n    this.setState({\n      isFullScreen: false,\n    });\n  };\n\n  downloadCode = () => {\n    let extention = \"\";\n    switch (this.state.language) {\n      case \"text/x-csrc\":\n        extention = \".c\";\n        break;\n      case \"text/x-c++src\":\n        extention = \".cpp\";\n        break;\n      case \"text/x-java\":\n        extention = \".java\";\n        break;\n      default:\n        extention = \".txt\";\n        break;\n    }\n\n    const fileName = \"main\" + extention;\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.code], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = fileName;\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  decode = (bytes) => {\n    console.log(\"called decode\");\n\n    let escaped = escape(atob(bytes || \"\"));\n    try {\n      return decodeURIComponent(escaped);\n    } catch {\n      return unescape(escaped);\n    }\n  };\n\n  runCode = () => {\n    if (this.state.code !== \"\") {\n      this.setState((prevState) => {\n        return {\n          isRunning: !prevState.isRunning,\n        };\n      });\n      let data = {\n        source_code: this.state.code,\n        language_id: this.language_id[this.state.language],\n        stdin: this.state.inputText,\n      };\n\n      let urlBase = \"https://api.judge0.com/submissions/\";\n\n      // let sendText =\n      //   \"?base64_encoded=false&fields=stdout,stderr,status_id,language_id\";\n\n      postData(urlBase, data).then((res) => {\n        setTimeout(fetchSubmission(res), 200);\n      });\n\n      let fetchSubmission = async (submission_token) => {\n        let result = await getData(\n          \"https://api.judge0.com/submissions/\" +\n            submission_token +\n            \"?base64_encoded=true\"\n        );\n\n        if (result.status.id <= 2) {\n          setTimeout(fetchSubmission(submission_token), 200);\n          return;\n        } else {\n          let output = \"\";\n          console.log(result);\n          if (result.stdout != null) {\n            output = this.decode(result.stdout);\n          } else if (result.compile_output != null) {\n            output = this.decode(result.compile_output);\n          } else if (result.stderr != null) {\n            output = this.decode(result.stderr);\n          }\n\n          this.setState({\n            outputText: output,\n          });\n\n          this.setState((prevState) => {\n            return {\n              isRunning: !prevState.isRunning,\n            };\n          });\n        }\n      };\n    } else {\n      let output = \"code dude\";\n      this.setState({\n        outputText: output,\n      });\n\n      this.setState((prevState) => {\n        return {\n          isRunning: false,\n        };\n      });\n    }\n\n    async function getData(url) {\n      const response = await fetch(url);\n\n      const output = await response.json();\n\n      return output;\n    }\n\n    async function postData(url = \"\", data = {}) {\n      const response = await fetch(url, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      let token = await response.json();\n      return await token.token;\n    }\n  };\n\n  render() {\n    let scrollClass = \"scrollinout\";\n    if (this.state.isReset) {\n      this.setState({\n        code: \"\",\n      });\n    }\n    let loading = null;\n    if (this.state.isRunning) {\n      loading = <Loader />;\n    }\n\n    return (\n      <div className=\"App\">\n        <Navbar title=\"Code Editor\" />\n\n        <div class=\"container\">\n          <div class=\"Toolbar\">\n            <Toolbar\n              selected={this.selectHandler}\n              fullScreen={this.fullScreenToggle}\n              reset={this.resetCode}\n              runCode={this.runCode}\n              downloadCode={this.downloadCode}\n            />\n          </div>\n          <div class=\"Input\">Input</div>\n          <div class=\"Editor\">\n            <Editor\n              changed={this.editorUpdated}\n              theme={this.state.theme}\n              language={this.state.language}\n              value={this.state.code}\n              isFullScreen={this.state.isFullScreen}\n              reset={this.state.isReset}\n              helper={this.resetCode}\n              isReadOnly={false}\n              lineNumber={true}\n              autoFocus={true}\n              fullscreenhelper={this.fullscreenhelper}\n              isSelected={this.state.isSelected}\n              selectHelper={this.selectHelper}\n            />\n          </div>\n          <div class=\"Input-box\">\n            <Editor\n              changed={this.inputUpdated}\n              theme={this.state.theme}\n              isReadOnly={false}\n              autoFocus={false}\n              lineNumber={true}\n              class={scrollClass}\n            />\n          </div>\n          <div class=\"Output\">{loading === null ? \"Output\" : loading}</div>\n          <div class=\"Output-box\">\n            <Editor\n              theme={this.state.theme}\n              isReadOnly={true}\n              autoFocus={false}\n              value={this.state.outputText}\n              lineNumber={true}\n              class={scrollClass}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}